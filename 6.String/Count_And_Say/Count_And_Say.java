package algorithms.part3;

public class Count_And_Say {
	
	public static void main(String[] args) {
		
		int n = 9;
		
		String result = countAndSay(n);
		
		System.out.println(result);
	}
	
	/*
	 * Time complexity:
	 * The time complexity of the provided countAndSay implementation is T = O(2^n). 
	 * This exponential growth is due to the rapidly increasing length of the sequences 
	 * generated by the "Count and Say" sequence.
	 *
     * Space complexity:
     * S = O(1) when we don't consider the space used to store output. If we consider that 
     * in space complexity calculation, then S = O(2^n). This exponential space requirement 
     * is due to the rapidly increasing length of the sequences generated by the "Count and Say" 
     * sequence, which need to be stored in memory during the computation.
	 * 
	 */
	public static String countAndSay(int n) {
		
		String result = "1";
		for(int i = 1; i < n; i++) {
			result = countAndSayHelper(result);
		}
		return result;
	}
	
	public static String countAndSayHelper(String inputStr) {
		
		int n = inputStr.length();
		StringBuilder outputsb = new StringBuilder();
		char prev = inputStr.charAt(0);
		int count = 1;
		for(int i = 1; i <= n-1; i++) {
			if(inputStr.charAt(i) == prev) {
				count++;
			} else {
				outputsb.append(count).append(prev);
				prev = inputStr.charAt(i);
				count = 1;
			}
		}
		
		outputsb.append(count).append(prev);
		
		return outputsb.toString();
	}
}
